{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/Tracklist/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","e","preventDefault","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","SavedTrack","push","filter","playlist","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.271ace46.chunk.js","sourcesContent":["const clientId = '8921a2edf5e5425fa850881f8356585d';\r\nconst redirectUri = \"http://tested-clocks.surge.sh\";\r\n// const redirectUri = \"http://localhost:3000\";\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n      if (accessToken) {\r\n        return accessToken;\r\n      }\r\n  \r\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n      if (accessTokenMatch && expiresInMatch) {\r\n        accessToken = accessTokenMatch[1];\r\n        const expiresIn = Number(expiresInMatch[1]);\r\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n        window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\r\n        return accessToken;\r\n      } else {\r\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n        window.location = accessUrl;\r\n      }\r\n    },\r\n  \r\n    search(term) {\r\n      const accessToken = Spotify.getAccessToken();\r\n      return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`\r\n        }\r\n      }).then(response => {\r\n        return response.json();\r\n      }).then(jsonResponse => {\r\n        if (!jsonResponse.tracks) {\r\n          return [];\r\n        }\r\n        return jsonResponse.tracks.items.map(track => ({\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri\r\n        }));\r\n      });\r\n    },\r\n  \r\n    savePlaylist(name, trackUris) {\r\n      if (!name || !trackUris.length) {\r\n        return;\r\n      }\r\n  \r\n      const accessToken = Spotify.getAccessToken();\r\n      const headers = { Authorization: `Bearer ${accessToken}` };\r\n      let userId;\r\n  \r\n      return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n      ).then(response => response.json()\r\n      ).then(jsonResponse => {\r\n        userId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({name: name})\r\n        }).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n          const playlistId = jsonResponse.id;\r\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n            headers: headers,\r\n            method: 'POST',\r\n            body: JSON.stringify({uris: trackUris})\r\n          });\r\n        });\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      term: ''\r\n    };\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n  }\r\n  //search the term\r\n  search(){\r\n    this.props.onSearch(this.state.term);\r\n  }\r\n  //handle the search event\r\n  handleTermChange(e){\r\n    e.preventDefault();\r\n    this.setState({term: e.target.value});\r\n  }\r\n    render(){\r\n        return(\r\n        <div className=\"SearchBar\">\r\n        <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\r\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n      </div>\r\n      );\r\n    }\r\n}\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n        \r\n    }\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n    //remove track(s)\r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track)\r\n    }\r\n    renderAction(){\r\n        if(this.props.isRemoval){\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        }else{\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n        <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>);\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport Track from './../Track/Track';\r\nimport './TrackList.css';\r\n\r\nclass TrackList extends React.Component{\r\n    render(){\r\n        return(<div className=\"TrackList\">\r\n        {this.props.tracks.map( track => {\r\n            return <Track track={track} key={track.id} \r\n                            onAdd={this.props.onAdd}\r\n                            onRemove={this.props.onRemove}\r\n                            isRemoval={this.props.isRemoval}/>\r\n        })}\r\n    </div>);\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport TrackList from './../Tracklist/TrackList';\r\nimport './SearchResults.css';\r\n\r\n\r\nclass SearchResults extends React.Component{\r\n    render(){\r\n        return(\r\n        <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\r\n      </div>)\r\n    }\r\n}\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from './../Tracklist/TrackList';\r\n\r\nclass Playlist extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n  //handle the name change event\r\n    handleNameChange(e){\r\n      this.props.onNameChange(e.target.value);\r\n    }\r\n    render(){\r\n        return(<div className=\"Playlist\">\r\n        <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\r\n        <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true}/>\r\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n      </div>)\r\n    }\r\n}\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from './../SearchBar/SearchBar';\nimport SearchResults from './../SearchResults/SearchResults';\nimport Playlist from './../Playlist/Playlist';\nimport Spotify from './../../util/Spotify';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      searchResults : [],\n      playlistName: 'Last Show',\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  \n  }\n//add track\n  addTrack(track){\n    let tracks = this.state.playlistTracks;\n      if(tracks.find(SavedTrack =>\n        SavedTrack.id === track.id)) {\n        return;\n      }\n      tracks.push(track);\n      this.setState({playlistTracks : tracks});\n  }\n  //remove track(s)\n  removeTrack(track){\n    let tracks = this.state.playlistTracks.filter(SavedTrack => SavedTrack.id !== track.id);\n      this.setState({playlistTracks : tracks});\n  }\n  //update playlist name\n  updatePlaylistName(name){\n    this.setState({playlistName: name});\n  }\n  //save playlist\n  savePlaylist(){\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() =>{\n      this.setState({playlistName: 'New Playlist', playlistTracks: []});\n    });\n  }\n  //search\n  search(term){\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    });\n    \n  }\n\n  render(){\n    return (\n      <div>\n        <h1>West<span className=\"highlight\">side</span>Music</h1>\n        <div className=\"App\">\n        <SearchBar onSearch={this.search}/>\n        <div className=\"App-playlist\">\n         <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n        <Playlist playlist={this.state.playlistName} \n                  playlistTracks={this.state.playlistTracks}\n                  onRemove={this.removeTrack}\n                  onNameChange={this.updatePlaylistName}\n                  onSave={this.savePlaylist}/>\n        </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}