{"ast":null,"code":"var clientId='8921a2edf5e5425fa850881f8356585d';var redirectUri=\"http://tested-clocks.surge.sh\";var accessToken;var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}//check for access token\nvar accessTokenMacth=window.location.href.match(/access_token=([^&]*)/);var expireTime=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMacth&&expireTime){accessToken=accessTokenMacth[1];var expiresIn=Number(expireTime[1]);//wipe the token and grab a new access token\nwindow.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('Access Token',null,'/');return accessToken;}else{var accessUrrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);window.location=accessUrrl;}},//get access token with the search term\nsearch:function search(term){var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(reponse){return reponse.json();}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});});},//save users playlist\nsavePlaylist:function savePlaylist(name,trackUris){if(!name||!trackUris.length){return;}var accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};var userId;return fetch('https://api.spotify.com/v1/me',{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{headers:headers,method:'POST',body:JSON.stringify({name:name})}).then(function(response){response.json();}).then(function(jsonResponse){var playlistId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playlistId,\"/tracks\"),{headers:headers,method:'POST',body:JSON.stringify({uris:trackUris})});});});}};export default Spotify;","map":{"version":3,"sources":["C:/Users/maino/Documents/react/westside-music/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMacth","window","location","href","match","expireTime","expiresIn","Number","setTimeout","history","pushState","accessUrrl","search","term","fetch","headers","Authorization","then","reponse","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","response","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["const clientId = '8921a2edf5e5425fa850881f8356585d';\r\nconst redirectUri = \"http://tested-clocks.surge.sh\";\r\n\r\nlet accessToken;\r\nconst Spotify = {\r\ngetAccessToken(){\r\n    if(accessToken){\r\n        return accessToken;\r\n    }\r\n    //check for access token\r\n    const accessTokenMacth = window.location.href.match(/access_token=([^&]*)/);\r\n    const expireTime = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if(accessTokenMacth && expireTime){\r\n        accessToken = accessTokenMacth[1];\r\n        const expiresIn = Number(expireTime[1]);\r\n        //wipe the token and grab a new access token\r\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n        window.history.pushState('Access Token', null, '/');\r\n        return accessToken;\r\n\r\n    }else {\r\n        const accessUrrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n        window.location = accessUrrl;\r\n    }\r\n    \r\n},\r\n//get access token with the search term\r\nsearch(term){\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, \r\n    {headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n    }}).then(reponse => {\r\n        return reponse.json();\r\n    }).then(jsonResponse => {\r\n        if(!jsonResponse.tracks){\r\n            return [];\r\n        }\r\n        return jsonResponse.tracks.items.map(track => ({\r\n            id: track.id,\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            album: track.album.name,\r\n            uri: track.uri\r\n        }));\r\n    });\r\n},\r\n\r\n//save users playlist\r\nsavePlaylist(name, trackUris){\r\n    if(!name || !trackUris.length){\r\n        return;\r\n    }\r\n    \r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = {Authorization: `Bearer ${accessToken}`};\r\n    let userId;\r\n\r\n    return fetch('https://api.spotify.com/v1/me', {headers: headers})\r\n    .then(response => response.json())\r\n    .then(jsonResponse => {\r\n        userId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n            headers: headers,\r\n            method: 'POST',\r\n            body: JSON.stringify({name: name})\r\n        }).then(response => {\r\n            response.json();\r\n        }).then(jsonResponse => {\r\n            const playlistId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, \r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({uris: trackUris})\r\n            })\r\n        })\r\n    })\r\n}\r\n}\r\n\r\n\r\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}