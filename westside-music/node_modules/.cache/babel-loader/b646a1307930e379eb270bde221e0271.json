{"ast":null,"code":"const clientId = '8921a2edf5e5425fa850881f8356585d';\nconst redirectUri = \"http://localhost:3000\";\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } //check for access token\n\n\n    const accessTokenMacth = window.location.href.match(/access_token=([^&]*)/);\n    const expireTime = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMacth && expireTime) {\n      accessToken = accessTokenMacth[1];\n      const expiresIn = Number(expireTime[1]); //wipe the token and grab a new access token\n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrrl;\n    }\n  },\n\n  //get access token with the search term\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(reponse => {\n      return reponse.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  //save users playlist\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => {\n        response.json();\n      }).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["C:/Users/maino/Documents/react/westside-music/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMacth","window","location","href","match","expireTime","expiresIn","Number","setTimeout","history","pushState","accessUrrl","search","term","fetch","headers","Authorization","then","reponse","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","response","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["const clientId = '8921a2edf5e5425fa850881f8356585d';\r\nconst redirectUri = \"http://localhost:3000\";\r\nlet accessToken;\r\nconst Spotify = {\r\ngetAccessToken(){\r\n    if(accessToken){\r\n        return accessToken;\r\n    }\r\n    //check for access token\r\n    const accessTokenMacth = window.location.href.match(/access_token=([^&]*)/);\r\n    const expireTime = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if(accessTokenMacth && expireTime){\r\n        accessToken = accessTokenMacth[1];\r\n        const expiresIn = Number(expireTime[1]);\r\n        //wipe the token and grab a new access token\r\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n        window.history.pushState('Access Token', null, '/');\r\n        return accessToken;\r\n\r\n    }else {\r\n        const accessUrrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n        window.location = accessUrrl;\r\n    }\r\n    \r\n},\r\n//get access token with the search term\r\nsearch(term){\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, \r\n    {headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n    }}).then(reponse => {\r\n        return reponse.json();\r\n    }).then(jsonResponse => {\r\n        if(!jsonResponse.tracks){\r\n            return [];\r\n        }\r\n        return jsonResponse.tracks.items.map(track => ({\r\n            id: track.id,\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            album: track.album.name,\r\n            uri: track.uri\r\n        }));\r\n    });\r\n},\r\n\r\n//save users playlist\r\nsavePlaylist(name, trackUris){\r\n    if(!name || !trackUris.length){\r\n        return;\r\n    }\r\n    \r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = {Authorization: `Bearer ${accessToken}`};\r\n    let userId;\r\n\r\n    return fetch('https://api.spotify.com/v1/me', {headers: headers})\r\n    .then(response => response.json())\r\n    .then(jsonResponse => {\r\n        userId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n            headers: headers,\r\n            method: 'POST',\r\n            body: JSON.stringify({name: name})\r\n        }).then(response => {\r\n            response.json();\r\n        }).then(jsonResponse => {\r\n            const playlistId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, \r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({uris: trackUris})\r\n            })\r\n        })\r\n    })\r\n}\r\n}\r\n\r\n\r\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}