{"ast":null,"code":"const clientId = '8921a2edf5e5425fa850881f8356585d';\nconst redirectUri = \"http://localhost:3000\";\nlet accessToken = '';\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } //check for access token\n\n\n    const accessTokenMacth = window.location.href.match(/access_token=([^&]*)/);\n    const expireTime = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMacth && expireTime) {\n      accessToken = accessTokenMacth[1];\n      const expiresIn = Number(expireTime[1]); //wipe the token and grab a new access token\n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrrl;\n    }\n  },\n\n  //get access token with the search term\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(reponse => {\n      return reponse.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(item => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["C:/Users/maino/Documents/react/westside-music/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMacth","window","location","href","match","expireTime","expiresIn","Number","setTimeout","history","pushState","accessUrrl","search","term","fetch","headers","Authorization","then","reponse","json","jsonResponse","tracks","items","map","item","id","track","name","artist","artists","album","uri"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAjB;AACA,MAAMC,WAAW,GAAG,uBAApB;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA,MAAMC,OAAO,GAAG;AAChBC,EAAAA,cAAc,GAAE;AACZ,QAAGF,WAAH,EAAe;AACX,aAAOA,WAAP;AACH,KAHW,CAIZ;;;AACA,UAAMG,gBAAgB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAzB;AACA,UAAMC,UAAU,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAnB;;AAEA,QAAGJ,gBAAgB,IAAIK,UAAvB,EAAkC;AAC9BR,MAAAA,WAAW,GAAGG,gBAAgB,CAAC,CAAD,CAA9B;AACA,YAAMM,SAAS,GAAGC,MAAM,CAACF,UAAU,CAAC,CAAD,CAAX,CAAxB,CAF8B,CAG9B;;AACAJ,MAAAA,MAAM,CAACO,UAAP,CAAkB,MAAMX,WAAW,GAAG,EAAtC,EAA0CS,SAAS,GAAG,IAAtD;AACAL,MAAAA,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACA,aAAOb,WAAP;AAEH,KARD,MAQM;AACF,YAAMc,UAAU,GAAI,oDAAmDhB,QAAS,kEAAiEC,WAAY,EAA7J;AACAK,MAAAA,MAAM,CAACC,QAAP,GAAkBS,UAAlB;AACH;AAEJ,GAtBe;;AAuBhB;AACAC,EAAAA,MAAM,CAACC,IAAD,EAAM;AACR,UAAMhB,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;AACA,WAAOe,KAAK,CAAE,kDAAiDD,IAAK,EAAxD,EACZ;AAACE,MAAAA,OAAO,EAAE;AACNC,QAAAA,aAAa,EAAG,UAASnB,WAAY;AAD/B;AAAV,KADY,CAAL,CAGHoB,IAHG,CAGEC,OAAO,IAAI;AAChB,aAAOA,OAAO,CAACC,IAAR,EAAP;AACH,KALM,EAKJF,IALI,CAKCG,YAAY,IAAI;AACpB,UAAG,CAACA,YAAY,CAACC,MAAjB,EAAwB;AACpB,eAAO,EAAP;AACH;;AACD,aAAOD,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA8BC,IAAI,KAAK;AAC1CC,QAAAA,EAAE,EAAEC,KAAK,CAACD,EADgC;AAE1CE,QAAAA,IAAI,EAAED,KAAK,CAACC,IAF8B;AAG1CC,QAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiBF,IAHiB;AAI1CG,QAAAA,KAAK,EAAEJ,KAAK,CAACI,KAAN,CAAYH,IAJuB;AAK1CI,QAAAA,GAAG,EAAEL,KAAK,CAACK;AAL+B,OAAL,CAAlC,CAAP;AAOH,KAhBM,CAAP;AAiBH;;AA3Ce,CAAhB;AA8CA,eAAejC,OAAf","sourcesContent":["const clientId = '8921a2edf5e5425fa850881f8356585d';\r\nconst redirectUri = \"http://localhost:3000\";\r\nlet accessToken = '';\r\nconst Spotify = {\r\ngetAccessToken(){\r\n    if(accessToken){\r\n        return accessToken;\r\n    }\r\n    //check for access token\r\n    const accessTokenMacth = window.location.href.match(/access_token=([^&]*)/);\r\n    const expireTime = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if(accessTokenMacth && expireTime){\r\n        accessToken = accessTokenMacth[1];\r\n        const expiresIn = Number(expireTime[1]);\r\n        //wipe the token and grab a new access token\r\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n        window.history.pushState('Access Token', null, '/');\r\n        return accessToken;\r\n\r\n    }else {\r\n        const accessUrrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n        window.location = accessUrrl;\r\n    }\r\n    \r\n},\r\n//get access token with the search term\r\nsearch(term){\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, \r\n    {headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n    }}).then(reponse => {\r\n        return reponse.json();\r\n    }).then(jsonResponse => {\r\n        if(!jsonResponse.tracks){\r\n            return [];\r\n        }\r\n        return jsonResponse.tracks.items.map(item => ({\r\n            id: track.id,\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            album: track.album.name,\r\n            uri: track.uri\r\n        }));\r\n    });\r\n}\r\n}\r\n\r\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}