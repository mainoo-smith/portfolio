{"ast":null,"code":"var clientId='8921a2edf5e5425fa850881f8356585d';var redirectUri=\"http://tested-clocks.surge.sh\";// const redirectUri = \"http://localhost:3000\";\nvar accessToken;var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}var accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];var expiresIn=Number(expiresInMatch[1]);window.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('Access Token',null,'/');// This clears the parameters, allowing us to grab a new access token when it expires.\nreturn accessToken;}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);window.location=accessUrl;}},search:function search(term){var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});});},savePlaylist:function savePlaylist(name,trackUris){if(!name||!trackUris.length){return;}var accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};var userId;return fetch('https://api.spotify.com/v1/me',{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{headers:headers,method:'POST',body:JSON.stringify({name:name})}).then(function(response){return response.json();}).then(function(jsonResponse){var playlistId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playlistId,\"/tracks\"),{headers:headers,method:'POST',body:JSON.stringify({uris:trackUris})});});});}};export default Spotify;","map":{"version":3,"sources":["C:/Users/maino/Documents/react/westside-music/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["const clientId = '8921a2edf5e5425fa850881f8356585d';\r\nconst redirectUri = \"http://tested-clocks.surge.sh\";\r\n// const redirectUri = \"http://localhost:3000\";\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n      if (accessToken) {\r\n        return accessToken;\r\n      }\r\n  \r\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n      if (accessTokenMatch && expiresInMatch) {\r\n        accessToken = accessTokenMatch[1];\r\n        const expiresIn = Number(expiresInMatch[1]);\r\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n        window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\r\n        return accessToken;\r\n      } else {\r\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n        window.location = accessUrl;\r\n      }\r\n    },\r\n  \r\n    search(term) {\r\n      const accessToken = Spotify.getAccessToken();\r\n      return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`\r\n        }\r\n      }).then(response => {\r\n        return response.json();\r\n      }).then(jsonResponse => {\r\n        if (!jsonResponse.tracks) {\r\n          return [];\r\n        }\r\n        return jsonResponse.tracks.items.map(track => ({\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri\r\n        }));\r\n      });\r\n    },\r\n  \r\n    savePlaylist(name, trackUris) {\r\n      if (!name || !trackUris.length) {\r\n        return;\r\n      }\r\n  \r\n      const accessToken = Spotify.getAccessToken();\r\n      const headers = { Authorization: `Bearer ${accessToken}` };\r\n      let userId;\r\n  \r\n      return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n      ).then(response => response.json()\r\n      ).then(jsonResponse => {\r\n        userId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({name: name})\r\n        }).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n          const playlistId = jsonResponse.id;\r\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n            headers: headers,\r\n            method: 'POST',\r\n            body: JSON.stringify({uris: trackUris})\r\n          });\r\n        });\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default Spotify;"]},"metadata":{},"sourceType":"module"}