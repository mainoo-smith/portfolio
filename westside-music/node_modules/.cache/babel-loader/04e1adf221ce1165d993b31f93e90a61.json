{"ast":null,"code":"const clientId = '8921a2edf5e5425fa850881f8356585d';\nconst redirectUri = \"http://tested-clocks.surge.sh\";\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["C:/Users/maino/Documents/react/westside-music/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["const clientId = '8921a2edf5e5425fa850881f8356585d';\r\nconst redirectUri = \"http://tested-clocks.surge.sh\";\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n      if (accessToken) {\r\n        return accessToken;\r\n      }\r\n  \r\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n      if (accessTokenMatch && expiresInMatch) {\r\n        accessToken = accessTokenMatch[1];\r\n        const expiresIn = Number(expiresInMatch[1]);\r\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n        window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\r\n        return accessToken;\r\n      } else {\r\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n        window.location = accessUrl;\r\n      }\r\n    },\r\n  \r\n    search(term) {\r\n      const accessToken = Spotify.getAccessToken();\r\n      return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`\r\n        }\r\n      }).then(response => {\r\n        return response.json();\r\n      }).then(jsonResponse => {\r\n        if (!jsonResponse.tracks) {\r\n          return [];\r\n        }\r\n        return jsonResponse.tracks.items.map(track => ({\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri\r\n        }));\r\n      });\r\n    },\r\n  \r\n    savePlaylist(name, trackUris) {\r\n      if (!name || !trackUris.length) {\r\n        return;\r\n      }\r\n  \r\n      const accessToken = Spotify.getAccessToken();\r\n      const headers = { Authorization: `Bearer ${accessToken}` };\r\n      let userId;\r\n  \r\n      return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n      ).then(response => response.json()\r\n      ).then(jsonResponse => {\r\n        userId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({name: name})\r\n        }).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n          const playlistId = jsonResponse.id;\r\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n            headers: headers,\r\n            method: 'POST',\r\n            body: JSON.stringify({uris: trackUris})\r\n          });\r\n        });\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default Spotify;"]},"metadata":{},"sourceType":"module"}